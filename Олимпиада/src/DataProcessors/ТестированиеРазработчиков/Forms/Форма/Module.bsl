
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ИмяТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	
	ЗагрузитьВопросы();
	
	ПеремешатьВопросы();
	
	ЧастиИмени = СтрРазделить(ИмяТекущегоПользователя, " ");
	ОбращениеКПользователю = ?(ЧастиИмени.Количество() > 1, ЧастиИмени[1], ЧастиИмени[0]);
	ВремяНаТестСтрокой = ВремяСтрокой(ВремяОтведенноеНаТест() * 60);
	
	МакетНачальнойСтраницы = РеквизитФормыВЗначение("Объект").ПолучитьМакет("НачальнаяСтраница");
	ТекстНачальнойСтраницы = МакетНачальнойСтраницы.ПолучитьТекст();
	ТекстНачальнойСтраницы = СтрЗаменить(ТекстНачальнойСтраницы, "[Разработчик]", ОбращениеКПользователю);
	ТекстНачальнойСтраницы = СтрЗаменить(ТекстНачальнойСтраницы, "[ОтведенноеВремя]", ВремяНаТестСтрокой);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТаблицаПереходовПоСценарию();
	
	УстановитьГраничныеСтраницыВопросов();
	
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТекстПредупреждения = НСтр("ru = 'Завершить тестирование?'");
	
	ПоказатьПодтверждениеЗакрытияФормы(Отказ, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТаблицаРезультатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	ДанныеРезультата = ТаблицаРезультатов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ДанныеРезультата.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВопроса = ТаблицаВопросов.НайтиСтроки(Новый Структура("Вопрос", ДанныеРезультата.Вопрос));
	
	Если ДанныеВопроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьВопросВОтдельномОкне(ДанныеВопроса[0]);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	ЗавершитьТестирование();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	ЗавершитьТестирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекстВопроса(Команда)
	
	ПоказатьВопросВОтдельномОкне(ТекущиеДанныеВопроса());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяСтраницыДекорации) Тогда
		
		Элементы.ПанельДекорации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
		
	КонецЕсли;
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеДалее.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				//@skip-warning
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеНазад.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода + 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		//@skip-warning
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов.

// Обработчик выполняется при открытии страницы помощника "СтраницаВопросы".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаНачало_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если Не ЭтоПереходДалее Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаВопросы".
//
// Параметры:
//   Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаНачало_ПриПереходеДалее(Отказ)
		
	ОбновитьСостояниеТестирования(ПредопределенноеЗначение("Перечисление.СостоянияТестирования.ВПроцессе"));
	
	ПодключитьОбработчикиКонтроляВремени();
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаВопросы".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаВопросы_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ДанныеВопроса = ТекущиеДанныеВопроса();

	// Заголовок
	
	ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Вопрос %1 из %2: %3'"),
		Строка(ДанныеВопроса.ПорядковыйНомер),
		Строка(ОбщееКоличествоВопросов),
		ДанныеВопроса.Заголовок);
		
	Элементы.ДекорацияЗаголовокВопроса.Заголовок = ТекстЗаголовка;
	
	// Вопрос
	
	ТекстВопросаHTML = ДанныеВопроса.ТекстВопроса;
	
	// Ответы
	
	СписокОтветов = Элементы.ВыбранныйОтвет.СписокВыбора;
	СписокОтветов.Очистить();
	
	Для Каждого Ответ Из ДанныеВопроса.Ответы Цикл
		СписокОтветов.Добавить(Ответ.Значение, Ответ.Представление);		
	КонецЦикла;
	
	Элементы.ВыбранныйОтвет.КоличествоКолонок = Цел(СписокОтветов.Количество()/2 + 0.5);
	
	// Результаты
	
	ЭтотОбъект.ВыбранныйОтвет = ДанныеВопроса.ВыбранныйОтвет;
	ЭтотОбъект.МоментПереходаКВопросу = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	Возврат Неопределено;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаВопросы".
//
// Параметры:
//   Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаВопросы_ПриПереходеДалее(Отказ)
	
	ЗафиксироватьВыбранныйОтвет(Истина);
	
	Если Не ЗавершитьТестированиеБезусловно Тогда
		
		Если Не ЭтоСтраницаВопроса() И ЕстьПропущенныеВопросы() Тогда
			Отказ = Истина;
			ПоказатьВопросОПреждевременномЗавершении();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "СтраницаВопросы".
//
// Параметры:
//   Отказ - Булево - флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на предыдущую страницу выполнен не будет.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаВопросы_ПриПереходеНазад(Отказ)
	
	ЗафиксироватьВыбранныйОтвет(Ложь); 
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаРезультаты".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаОжидания_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ОтключитьОбработчикиКонтроляВремени();
	
	Если Не УчастникЗавершилТестирование() Тогда
		
		ВремяОкончанияТестирования = ТекущаяДата();	
		СохранитьРезультатыНаСервере();
		
	КонецЕсли;
	
	Если ВсеУчастникиЗавершилиТестирование() Тогда
		
		ПропуститьСтраницу = Истина;
		
	Иначе
		
		ПодключитьОбработчикОжидания("ПроверитьЗавершениеТестирования", 3, Ложь);
		ПроверитьЗавершениеТестирования();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросОПреждевременномЗавершении()

	ТекстВопросаПользователю = "Некоторые из вопросов пропущены. Хотите ответить на них прежде, чем завершите тест?";
	
	Обработчик = Новый ОписаниеОповещения("ОтветНаВопросОПреждевременномЗавершении", ЭтотОбъект);
	
	ПоказатьВопрос(Обработчик, ТекстВопросаПользователю, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОПреждевременномЗавершении(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоСтраницаВопроса() Тогда
		Возврат; // время вышло
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		ЗавершитьТестированиеБезусловно = Истина;
		
		ИзменитьПорядковыйНомерПерехода(+1);
		
	Иначе
		
		ЭтотОбъект.МоментПереходаКВопросу = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПропущенныеВопросы()

	Возврат ТаблицаВопросов.НайтиСтроки(Новый Структура("ВыбранныйОтвет",0)).Количество() <> 0;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаРезультаты".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаРезультаты_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ЗагрузитьРезультатыТестирования();
	
	Для Каждого ДанныеРубрики Из ТаблицаРезультатов.ПолучитьЭлементы() Цикл
		Элементы.ТаблицаРезультатов.Развернуть(ДанныеРубрики.ПолучитьИдентификатор());
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника.

&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	Если Не УчастникЗавершилТестирование() Тогда
	
		Переход = ТаблицаПереходов.Добавить();
		Переход.ПорядковыйНомерПерехода = ТаблицаПереходов.Количество();
		Переход.ИмяОсновнойСтраницы     = "СтраницаНачало";
		Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииНачало";
		Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииНачало";
		Переход.ИмяОбработчикаПриОткрытии = "СтраницаНачало_ПриОткрытии";
		Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаНачало_ПриПереходеДалее";
		
		Для НомерВопроса = 1 По ТаблицаВопросов.Количество() Цикл
			
			Переход = ТаблицаПереходов.Добавить();
			Переход.ПорядковыйНомерПерехода = ТаблицаПереходов.Количество();
			Переход.НомерВопроса = НомерВопроса;
			
			Переход.ИмяОсновнойСтраницы     = "СтраницаВопросы";
			Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
			Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
			Переход.ИмяОбработчикаПриОткрытии = "СтраницаВопросы_ПриОткрытии";
			Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаВопросы_ПриПереходеДалее";
			Переход.ИмяОбработчикаПриПереходеНазад = "СтраницаВопросы_ПриПереходеНазад";
			
		КонецЦикла;
		
	КонецЕсли;

	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = ТаблицаПереходов.Количество();
	Переход.ИмяОсновнойСтраницы     = "СтраницаОжидания";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОжидание";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаОжидания_ПриОткрытии";
			
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = ТаблицаПереходов.Количество();
	Переход.ИмяОсновнойСтраницы     = "СтраницаРезультаты";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОкончание";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииОкончание";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаРезультаты_ПриОткрытии";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаРезультатов.Имя);
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаРезультатов.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаРезультатовВыбранныйОтвет.Имя);
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаРезультатов.Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "<пропущен>");
	
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СводнаяТаблицаРезультатов.Имя);
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СводнаяТаблицаРезультатов.Участник");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПараметрыСеанса.ТекущийПользователь;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВопросы()
	
	ОбщееКоличествоВопросов = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВопросыКОлимпиаде.Ссылка КАК Ссылка,
		|	ВопросыКОлимпиаде.Родитель КАК Родитель,
		|	ВопросыКОлимпиаде.Наименование КАК НаименованиеВопроса,
		|	ВопросыКОлимпиаде.Родитель.Наименование КАК НаименованиеРодителя,
		|	ВопросыКОлимпиаде.КодНаВстроенномЯзыке КАК КодНаВстроенномЯзыке,
		|	ВопросыКОлимпиаде.ОписаниеОтвета КАК ОписаниеОтвета,
		|	ВопросыКОлимпиаде.ВариантыОтветов.(
		|		НомерСтроки,
		|		Ответ,
		|		Корректный) КАК ВариантыОтветов
		|ИЗ
		|	Справочник.ВопросыКОлимпиаде КАК ВопросыКОлимпиаде
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Результаты КАК Результаты
		|		ПО Результаты.Участник = &ТекущийПользователь
		|			И Результаты.Вопрос = ВопросыКОлимпиаде.Ссылка
		|ГДЕ
		|	ВопросыКОлимпиаде.ЭтоГруппа = ЛОЖЬ
		|	И ВопросыКОлимпиаде.ПометкаУдаления = ЛОЖЬ
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеРодителя,
		|	НаименованиеВопроса
		|ИТОГИ
		|ПО
		|	Родитель";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	ТаблицаВопросов.Очистить();
	
	ВыборкаРубрик = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРубрик.Следующий() Цикл
				
		ВыборкаВопросов = ВыборкаРубрик.Выбрать();
		Пока ВыборкаВопросов.Следующий() Цикл
			
			ОбщееКоличествоВопросов = ОбщееКоличествоВопросов + 1;
			
			ДанныеВопроса = ТаблицаВопросов.Добавить();
			
			ДанныеВопроса.ПорядковыйНомер = ОбщееКоличествоВопросов;
			ДанныеВопроса.Вопрос = ВыборкаВопросов.Ссылка;
			ДанныеВопроса.Рубрика = ВыборкаВопросов.Родитель;
			
			ТекстВопроса = ВыборкаВопросов.КодНаВстроенномЯзыке;
			ТекстВопроса = СтрЗаменить(ТекстВопроса, Символы.Таб, "    ");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, Символы.ВК+Символы.ПС, Символы.ПС);
			ТекстВопроса = ФорматированиеКода.КодНаВстроенномЯзыке(ТекстВопроса);
			
			ДанныеВопроса.Заголовок = ВыборкаВопросов.НаименованиеРодителя;
			ДанныеВопроса.ТекстВопроса = ТекстВопроса;
			
			ВыборкаОтветов = ВыборкаВопросов.ВариантыОтветов.Выбрать();
			Пока ВыборкаОтветов.Следующий() Цикл
				
				ДанныеОтвета = ДанныеВопроса.Ответы.Добавить();
				ДанныеОтвета.Значение = ВыборкаОтветов.НомерСтроки;
				ДанныеОтвета.Представление = ВыборкаОтветов.Ответ;
				
				Если ВыборкаОтветов.Корректный Тогда
					ДанныеВопроса.ПравильныйОтвет = ВыборкаОтветов.НомерСтроки;
				КонецЕсли;
				
			КонецЦикла;
			
			ДанныеВопроса.Ответы.СортироватьПоЗначению();
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Структура = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = ЗначениеПоУмолчанию;
	Если Структура.Свойство(Ключ, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПеремешатьВопросы()
	
	ГенераторЧисел = Новый ГенераторСлучайныхЧисел();
	ФорматнаяСтрока = "ЧЦ=5; ЧДЦ=0; ЧН=; ЧВН=; ЧГ=;";
	
	КопияТаблицыВопросов = ТаблицаВопросов.Выгрузить();	
	КопияТаблицыВопросов.Колонки.Добавить("КлючПорядкаРубрики");
	КопияТаблицыВопросов.Колонки.Добавить("КлючПорядкаВопроса");

	КлючиПорядкаРубрик = Новый Соответствие();
	
	Для Каждого ДанныеВопроса Из КопияТаблицыВопросов Цикл
		
		КлючПорядкаРубрики = КлючиПорядкаРубрик.Получить(ДанныеВопроса.Рубрика);
		
		Если КлючПорядкаРубрики = Неопределено Тогда
			СлучайноеЧисло = ГенераторЧисел.СлучайноеЧисло(0, 99999);
			КлючПорядкаРубрики = Формат(СлучайноеЧисло, ФорматнаяСтрока);
			КлючиПорядкаРубрик.Вставить(ДанныеВопроса.Рубрика, КлючПорядкаРубрики);
		КонецЕсли;
		
		СлучайноеЧисло = ГенераторЧисел.СлучайноеЧисло(0, 99999);
		КлючПорядкаВопроса= Формат(СлучайноеЧисло, ФорматнаяСтрока);
		
		ДанныеВопроса.КлючПорядкаРубрики = КлючПорядкаРубрики;
		ДанныеВопроса.КлючПорядкаВопроса = КлючПорядкаВопроса;
		
	КонецЦикла;
	
	КопияТаблицыВопросов.Сортировать("КлючПорядкаРубрики, КлючПорядкаВопроса");

	ТаблицаВопросов.Загрузить(КопияТаблицыВопросов);
	
	НомерВопроса = 0;
	Для Каждого ДанныеВопроса Из ТаблицаВопросов Цикл
		НомерВопроса = НомерВопроса + 1;
		ДанныеВопроса.ПорядковыйНомер = НомерВопроса;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГраничныеСтраницыВопросов()
	
	ПервыйПереход = Неопределено;
	ПоследнийПереход = Неопределено;
	
	Для Каждого Переход Из ТаблицаПереходов Цикл
		Если Переход.НомерВопроса <> 0 Тогда
			Если ПервыйПереход = Неопределено Или Переход.ПорядковыйНомерПерехода < ПервыйПереход.ПорядковыйНомерПерехода Тогда
				ПервыйПереход = Переход;
			КонецЕсли;
			Если ПоследнийПереход = Неопределено Или Переход.ПорядковыйНомерПерехода > ПоследнийПереход.ПорядковыйНомерПерехода Тогда
				ПоследнийПереход = Переход;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйПереход <> Неопределено Тогда
		ПервыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПервыйВопрос";
	КонецЕсли;
	Если ПоследнийПереход <> Неопределено Тогда
		ПоследнийПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПоследнийВопрос";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьВыбранныйОтвет(ЭтоПереходДалее)
	
	ТекущийМомент = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВремяНаВопрос = ТекущийМомент - МоментПереходаКВопросу;
	
	Если ЭтоПереходДалее Тогда
		РеквизитыВопроса = ПолучитьДанныеВопроса(ПорядковыйНомерПерехода - 1);
	Иначе
		РеквизитыВопроса = ПолучитьДанныеВопроса(ПорядковыйНомерПерехода + 1);
	КонецЕсли;
	
	РеквизитыВопроса.ВыбранныйОтвет = ЭтотОбъект.ВыбранныйОтвет;
	РеквизитыВопроса.ВремяОтвета = РеквизитыВопроса.ВремяОтвета + ВремяНаВопрос;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросВОтдельномОкне(РеквизитыВопроса)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", РеквизитыВопроса.Заголовок);
	ПараметрыФормы.Вставить("ТекстHTML", РеквизитыВопроса.ТекстВопроса);
	
	ИмяФормыВопроса = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".", НаправлениеПоиска.СКонца)) + "ФормаТекстаHTML";
	
	ОткрытьФорму(ИмяФормыВопроса, ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВремяСтрокой(Знач Время)
	
	Если Не ЗначениеЗаполнено(Время) Тогда
		Возврат НСтр("ru = '0 мин.'")
	КонецЕсли; 
	
	Результат = Новый Массив;
	
	КоличествоСекунд = Время % 60;
	Время = Цел(Время / 60);
	
	Если КоличествоСекунд <> 0 Тогда
		Результат.Вставить(0, СтрШаблон(НСтр("ru = '%1 сек.'"), Строка(КоличествоСекунд)));
	КонецЕсли; 
	
	КоличествоМинут = Время % 60;
	Время = Цел(Время / 60);
	
	Если КоличествоМинут <> 0 Тогда
		Результат.Вставить(0, СтрШаблон(НСтр("ru = '%1 мин.'"), Строка(КоличествоМинут)));
	КонецЕсли; 
	
	КоличествоЧасов = Время;
	
	Если КоличествоЧасов <> 0 Тогда
		Результат.Вставить(0, СтрШаблон(НСтр("ru = '%1 ч.'"), Строка(КоличествоЧасов)));
	КонецЕсли;
	
	Возврат СтрСоединить(Результат, " ");
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПодтверждениеЗакрытияФормы(Отказ, Знач ЗавершениеРаботы, Знач ТекстПредупреждения)

	Если ЭтотОбъект.ЗакрытьФормуБезусловно Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьЗакрытиеФормы", ЭтотОбъект, Параметры);
	
	ПоказатьВопрос(Оповещение, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьЗакрытиеФормы(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да
		Или Ответ = КодВозвратаДиалога.ОК Тогда
		ЭтотОбъект.ЗакрытьФормуБезусловно = Истина;
		ЗавершитьТестирование();
	Иначе
		ЭтотОбъект.ЗакрытьФормуБезусловно = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьТестирование()
	Если ЭтотОбъект.ВладелецФормы = Неопределено Тогда
		ЗавершитьРаботуСистемы();
	Иначе
		ЭтотОбъект.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатыНаСервере()
	
	// Ответы на вопросы
	
	НаборЗаписей = РегистрыСведений.Результаты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Участник.Установить(ПараметрыСеанса.ТекущийПользователь);
	
	Для Каждого ДанныеВопроса Из ТаблицаВопросов Цикл
	
		ДанныеВыбранногоОтвета = ДанныеВопроса.Ответы.НайтиПоЗначению(ДанныеВопроса.ВыбранныйОтвет);
		ДанныеПравильногоОтвета = ДанныеВопроса.Ответы.НайтиПоЗначению(ДанныеВопроса.ПравильныйОтвет);
		
		Запись = НаборЗаписей.Добавить();
		
		Запись.Участник = ПараметрыСеанса.ТекущийПользователь;
		Запись.Вопрос = ДанныеВопроса.Вопрос;
		
		Если ДанныеВыбранногоОтвета <> Неопределено Тогда
			Запись.Ответ = ДанныеВыбранногоОтвета.Значение;
			Запись.ТекстОтвета = ДанныеВыбранногоОтвета.Представление;
		КонецЕсли;
		
		Запись.ПравильныйОтвет = ДанныеПравильногоОтвета.Значение;
		Запись.ТекстПравильногоОтвета = ДанныеПравильногоОтвета.Представление;
		
		Запись.Время = ДанныеВопроса.ВремяОтвета;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	// Отметка об окончании
	
	ОбновитьСостояниеТестирования(Перечисления.СостоянияТестирования.Завершено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьСостояниеТестирования(Знач Состояние)
	
	Запись = РегистрыСведений.Участники.СоздатьМенеджерЗаписи();
	Запись.Участник = ПараметрыСеанса.ТекущийПользователь;
	Запись.Прочитать();
	
	Если Запись.Выбран() Тогда
		Запись.СостояниеТестирования = Состояние;
		Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеДанныеВопроса()
	Возврат ПолучитьДанныеВопроса(ПорядковыйНомерПерехода);
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеВопроса(НомерПерехода)
	
	СтрокаПереходаТекущая = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", НомерПерехода))[0];
	
	ДанныеВопроса = ТаблицаВопросов[СтрокаПереходаТекущая.НомерВопроса - 1];
	
	Возврат ДанныеВопроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВсеУчастникиЗавершилиТестирование()
	
	Если РольДоступна("Организатор") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.Участники КАК Участники
		|ГДЕ
		|	НЕ Участники.Инкогнито
		|	И Участники.СостояниеТестирования В (
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияТестирования.ВПодгототвке),
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияТестирования.ВПроцессе)
		|	)";
		
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗавершениеТестирования()
	
	Перем КоличествоВсего, КоличествоОсталось;
	
	ПолучитьСтатистикуНезавершенныхТестов(КоличествоВсего, КоличествоОсталось);
	
	ТекстСообщения = СтрШаблон("Осталось: %1 из %2", Строка(КоличествоОсталось), Строка(КоличествоВсего));
	Элементы.ДекорацияСтатистикаОжидания.Заголовок = ТекстСообщения;
	
	Если КоличествоОсталось = 0 Тогда
		ОтключитьОбработчикОжидания("ПроверитьЗавершениеТестирования");
		ИзменитьПорядковыйНомерПерехода(+1);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьСтатистикуНезавершенныхТестов(КоличествоВсего, КоличествоОсталось)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Количество(
		|		ВЫБОР КОГДА Участники.СостояниеТестирования = ЗНАЧЕНИЕ(Перечисление.СостоянияТестирования.ВПодгототвке)
		|			ТОГДА Участники.Участник
		|		КОНЕЦ
		|	) КАК ВПодготовке,
		|	Количество(
		|		ВЫБОР КОГДА Участники.СостояниеТестирования = ЗНАЧЕНИЕ(Перечисление.СостоянияТестирования.ВПроцессе)
		|			ТОГДА Участники.Участник
		|		КОНЕЦ
		|	) КАК ВПроцессе,
		|	Количество(
		|		ВЫБОР КОГДА Участники.СостояниеТестирования = ЗНАЧЕНИЕ(Перечисление.СостоянияТестирования.Завершено)
		|			ТОГДА Участники.Участник
		|		КОНЕЦ
		|	) КАК Завершено
		|ИЗ
		|	РегистрСведений.Участники КАК Участники
		|ГДЕ
		|	Участники.Инкогнито = ЛОЖЬ";
		
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	КоличествоОсталось = Результат.ВПроцессе + Результат.ВПодготовке;
	КоличествоВсего = КоличествоОсталось + Результат.Завершено;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция УчастникЗавершилТестирование()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.Участники КАК Участники
		|ГДЕ
		|	Участники.Участник = &ТекущийПользователь
		|	И Участники.СостояниеТестирования = ЗНАЧЕНИЕ(Перечисление.СостоянияТестирования.Завершено)";
		
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатыТестирования()

	ЗагрузитьИндивидуальныеРезультаты();
	
	ЗагрузитьСводныеРезультаты();
	
	ПоказатьТекстСтатистикиТекущегоПользователя();

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИндивидуальныеРезультаты()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Результаты.Вопрос КАК Вопрос,
		|	Результаты.Вопрос.Родитель КАК Рубрика,
		|	Результаты.Время / 1000 КАК Время,
		|	Результаты.ТекстОтвета КАК ВыбранныйОтвет,
		|	Результаты.ТекстПравильногоОтвета КАК ПравильныйОтвет,
		|	Результаты.Вопрос.ОписаниеОтвета КАК Комментарий,
		|	ВЫБОР
		|		КОГДА Результаты.Ответ <> 0
		|		И Результаты.Ответ = Результаты.ПравильныйОтвет
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВыбранПравильныйОтвет,
		|	ВЫБОР
		|		КОГДА Результаты.Ответ = 0
		|			Тогда 1
		|		КОГДА Результаты.Ответ = Результаты.ПравильныйОтвет
		|			Тогда 0
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Статус
		|ИЗ
		|	РегистрСведений.Результаты КАК Результаты
		|ГДЕ
		|	Результаты.Участник = &ТекущийПользователь
		|УПОРЯДОЧИТЬ ПО
		|	Рубрика,
		|	Вопрос
		|АВТОУПОРЯДОЧИВАНИЕ
		|ИТОГИ ПО
		|	Рубрика";
		
	РезультатыПоРубрикам = ТаблицаРезультатов.ПолучитьЭлементы();
	РезультатыПоРубрикам.Очистить();
	
	ВыборкаПоРубрикам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРубрикам.Следующий() Цикл
		
		СтрокаРубрики = РезультатыПоРубрикам.Добавить();
		СтрокаРубрики.Вопрос = ВыборкаПоРубрикам.Рубрика;
		СтрокаРубрики.Статус = -1;
		СтрокаРубрики.ЭтоГруппа = Истина;
		
		РезультатыПоВопросам = СтрокаРубрики.ПолучитьЭлементы();
		
		ВыборкаПоВопросам = ВыборкаПоРубрикам.Выбрать();
		
		Пока ВыборкаПоВопросам.Следующий() Цикл
			
			СтрокаВопроса = РезультатыПоВопросам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВопроса, ВыборкаПоВопросам);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСводныеРезультаты()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Участники.Участник,
		|	Участники.Инкогнито,
		|	КОЛИЧЕСТВО(Результаты.Вопрос) КАК КоличествоВопросов,
		|	КОЛИЧЕСТВО(ВЫБОР
		|		КОГДА Результаты.Ответ > 0
		|			ТОГДА Результаты.Ответ
		|	КОНЕЦ) КАК КоличествоОтветов,
		|	КОЛИЧЕСТВО(ВЫБОР
		|		КОГДА Ответ > 0
		|		И Ответ = ПравильныйОтвет
		|			ТОГДА Ответ
		|	КОНЕЦ) КАК КоличествоПравильныхОтветов,
		|	СУММА(Результаты.Время) / 1000 КАК ЗатраченноеВремя,
		|	СУММА(Результаты.Время) КАК ВремяВМиллисекундах
		|ИЗ
		|	РегистрСведений.Участники КАК Участники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Результаты КАК Результаты
		|		ПО Участники.Участник = Результаты.Участник
		|ГДЕ
		|	Участники.СостояниеТестирования = ЗНАЧЕНИЕ(Перечисление.СостоянияТестирования.Завершено)
		|СГРУППИРОВАТЬ ПО
		|	Участники.Участник,
		|	Участники.Инкогнито
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоПравильныхОтветов УБЫВ,
		|	ВремяВМиллисекундах";
		
	СводнаяТаблицаРезультатов.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ПорядковыйНомер = 0;
	
	Для Каждого СтрокаРезультата Из СводнаяТаблицаРезультатов Цикл
		
		Если Не СтрокаРезультата.Инкогнито Тогда
			ПорядковыйНомер = ПорядковыйНомер + 1;
			СтрокаРезультата.Место = ПорядковыйНомер;
		КонецЕсли;
	
		ДоляПравильныхОтветов = СтрокаРезультата.КоличествоПравильныхОтветов / СтрокаРезультата.КоличествоВопросов;
		СтрокаРезультата.ПроцентПравильныхОтветов = Цел(ДоляПравильныхОтветов * 100);
		
	КонецЦикла;
	
	Элементы.СводнаяТаблицаРезультатов.ОтборСтрок = Новый ФиксированнаяСтруктура("Инкогнито",Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьТекстСтатистикиТекущегоПользователя()
		
	Перем МестоВРейтинге;
	Перем ВремяТестирования;
	Перем КоличествоВопросов;
	Перем КоличествоПравильныхОтветов;
	Перем ПроцентПравильныхОтветов;
	
	// Статистика
	
	Результат = СводнаяТаблицаРезультатов.НайтиСтроки(Новый Структура("Участник", ПараметрыСеанса.ТекущийПользователь));
	МестоВРейтинге = ?(ЗначениеЗаполнено(Результат) И Не Результат[0].Инкогнито, Результат[0].Место, 0);
	
	ВремяТестирования = 0;
	КоличествоВопросов = 0;
	КоличествоПравильныхОтветов = 0;
	
	Для Каждого СтрокаРубрики Из ТаблицаРезультатов.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаВопроса Из СтрокаРубрики.ПолучитьЭлементы() Цикл
			ВремяТестирования = ВремяТестирования + СтрокаВопроса.Время;
			КоличествоВопросов = КоличествоВопросов + 1;
			КоличествоПравильныхОтветов = КоличествоПравильныхОтветов + ?(СтрокаВопроса.Статус=0, 1, 0);
		КонецЦикла;
	КонецЦикла;
	
	ПроцентПравильныхОтветов = Цел(КоличествоПравильныхОтветов / КоличествоВопросов * 100);
	
	// Текст статистики
			
	ТекстСтатистики =
		НСтр("ru = 'Место в рейтинге: [Место]
              |Затраченное время: [ВремяТестирования]
              |Всего вопросов: [КоличествоВопросов]
              |Правильно отвечено: [ПравильноОтвеченных] ([ПроцентПравильноОтвеченных]%)'");
	
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[Место]", Формат(МестоВРейтинге, "ЧН='<результат не учитывается>';"));
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[ВремяТестирования]", ВремяСтрокой(ВремяТестирования));
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[КоличествоВопросов]", Строка(КоличествоВопросов));
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[ПравильноОтвеченных]", Строка(КоличествоПравильныхОтветов));
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[ПроцентПравильноОтвеченных]", Строка(ПроцентПравильныхОтветов));	
	
	Элементы.ДекорацияРезультаты.Заголовок = ТекстСтатистики;
	
	Если МестоВРейтинге = 0 Тогда
		Элементы.ДекорацияЗаголовокРезультата.Заголовок = "Ваш результат";
	ИначеЕсли МестоВРейтинге > 3 Тогда
		Элементы.ДекорацияЗаголовокРезультата.Заголовок = СтрШаблон("Вы заняли %1-е место в рейтинге", Строка(МестоВРейтинге));
	ИначеЕсли МестоВРейтинге = 3 Тогда
		Элементы.ДекорацияЗаголовокРезультата.Заголовок = "Поздравляем с третьим местом в рейтинге!";
	ИначеЕсли МестоВРейтинге = 2 Тогда
		Элементы.ДекорацияЗаголовокРезультата.Заголовок = "Поздравляем со вторым местом в рейтинге!";
	Иначе
		Элементы.ДекорацияЗаголовокРезультата.Заголовок = "Поздравляем Вас с победой!";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоСтраницаВопроса(Знач НомерПерехода = Неопределено)

	Если НомерПерехода = Неопределено Тогда
		НомерПерехода = ПорядковыйНомерПерехода;
	КонецЕсли;
	
	Переходы = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", НомерПерехода));
	
	Возврат Переходы.Количество() <> 0 И Переходы[0].НомерВопроса <> 0;
	
КонецФункции

&НаКлиенте
Процедура ПодключитьОбработчикиКонтроляВремени()
	
	ОтведенноеВремя = ВремяОтведенноеНаТест();
	
	Если ОтведенноеВремя <> 0 Тогда
		
		ВремяНачалаТестирования = ТекущаяДата();
		ВремяОкончанияТестирования = ВремяНачалаТестирования + ОтведенноеВремя * 60;
		ПериодичностьОбновленияТаймера = 10;
		
		ОбновитьПользовательскийТаймер();
		
		ПодключитьОбработчикОжидания("ОбновитьПользовательскийТаймер", ПериодичностьОбновленияТаймера, Ложь);
		ПодключитьОбработчикОжидания("ЗавершитьТестированиеПоТаймеру", ОтведенноеВремя * 60, Истина);
		
	КонецЕсли;
	
	Элементы.ОставшеесяВремя.Видимость = ЗначениеЗаполнено(ОтведенноеВремя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОбработчикиКонтроляВремени()
	
	ОтключитьОбработчикОжидания("ОбновитьПользовательскийТаймер");
	ОтключитьОбработчикОжидания("ЗавершитьТестированиеПоТаймеру");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВремяОтведенноеНаТест()
	
	Возврат Константы.ВремяОтведенноеНаТест.Получить();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПользовательскийТаймер()
	
	ОставшеесяВремя = ВремяСтрокой(ВремяОкончанияТестирования - ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьТестированиеПоТаймеру()
	
	ЗавершитьТестированиеБезусловно = Истина;
	
	Переход = ТаблицаПереходов.НайтиСтроки(Новый Структура("ИмяОсновнойСтраницы", "СтраницаОжидания"))[0];
	
	УстановитьПорядковыйНомерПерехода(Переход.ПорядковыйНомерПерехода);
	
КонецПроцедуры

#КонецОбласти
