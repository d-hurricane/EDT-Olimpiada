
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ИмяТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	
	ЗагрузитьВопросы();
	
	ПеремешатьВопросы();
	
	ПронумероватьВопросы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Устанавливаем текущую таблицу переходов.
	ТаблицаПереходовПоСценарию();
	
	// Позиционируемся на первом шаге помощника.
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТекстПредупреждения = НСтр("ru = 'Завершить тестирование?'");
	
	ПоказатьПодтверждениеЗакрытияФормы(Отказ, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТаблицаВопросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РеквизитыВопроса = ТаблицаВопросов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПоказатьВопросВОтдельномОкне(РеквизитыВопроса);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	ЗавершитьТестирование();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	ЗавершитьТестирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекстВопроса(Команда)
	
	РеквизитыВопроса = ТаблицаВопросов[ПорядковыйНомерВопроса - 1];
	
	ПоказатьВопросВОтдельномОкне(РеквизитыВопроса);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяСтраницыДекорации) Тогда
		
		Элементы.ПанельДекорации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
		
	КонецЕсли;
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеДалее.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				//@skip-warning
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеНазад.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода + 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		//@skip-warning
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов.

// Обработчик выполняется при открытии страницы помощника "СтраницаВопросы".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаВопросы_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ПропуститьСтраницу = (ТаблицаВопросов.Количество() = 0);
	
	Если Не ПропуститьСтраницу Тогда
		
		ВремяНачалаТестирования = ТекущаяДата();
		
		ПорядковыйНомерВопроса = 1;
	
		ПоказатьВопросТестируемому();
		
	КонецЕсли; 	
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаВопросы".
//
// Параметры:
//   Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаВопросы_ПриПереходеДалее(Отказ)
	
	Если ПорядковыйНомерВопроса > 0 Тогда
		ЗафиксироватьВыбранныйОтвет();
	КонецЕсли; 
	
	ПорядковыйНомерВопроса = ПорядковыйНомерВопроса + 1;
	
	Если ПорядковыйНомерВопроса <= ТаблицаВопросов.Количество() Тогда
		
		Отказ = Истина;
		
		ПоказатьВопросТестируемому();
		
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "СтраницаВопросы".
//
// Параметры:
//   Отказ - Булево - флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на предыдущую страницу выполнен не будет.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаВопросы_ПриПереходеНазад(Отказ)
	
	Отказ = Истина;
	
	ЗафиксироватьВыбранныйОтвет();
	
	Если ПорядковыйНомерВопроса > 1 Тогда
		
		ПорядковыйНомерВопроса = ПорядковыйНомерВопроса - 1;
		
		ПоказатьВопросТестируемому();
		
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаРезультаты".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаРезультаты_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ВремяОкончанияТестирования = ТекущаяДата();
	
	РассчитатьРезультаты(); 
	
	СохранитьРезультатыНаСервере();
	
	ВремяТестированияВСекундах = ВремяОкончанияТестирования - ВремяНачалаТестирования;
	ВремяТестированияСтрокой = ВремяСтрокой(ВремяТестированияВСекундах);
	
	КоличествоВопросов = ТаблицаВопросов.Количество();
	ПроцентПравильноОтвеченных = ?(КоличествоВопросов <> 0, Цел(КоличествоПравильныхОтветов/КоличествоВопросов*100), 0);
	
	ТекстСтатистики =
		НСтр("ru = 'Затраченное время: [ВремяТестирования]
              |Всего вопросов: [КоличествоВопросов]
              |Правильно отвечено: [ПравильноОтвеченных] ([ПроцентПравильноОтвеченных]%)
              |Пропущено: [ПропущенныхОтветов]'");
	
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[ВремяТестирования]", ВремяТестированияСтрокой);
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[КоличествоВопросов]", КоличествоВопросов);
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[ПравильноОтвеченных]", КоличествоПравильныхОтветов);
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[ПроцентПравильноОтвеченных]", ПроцентПравильноОтвеченных);
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[ПропущенныхОтветов]", КоличествоПропущенныхВопросов);
	
	Элементы.ДекорацияРезультаты.Заголовок = ТекстСтатистики;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника.

&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 1;
	Переход.ИмяОсновнойСтраницы     = "СтраницаНачало";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииНачало";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииНачало";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 2;
	Переход.ИмяОсновнойСтраницы     = "СтраницаВопросы";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаВопросы_ПриОткрытии";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаВопросы_ПриПереходеДалее";
	Переход.ИмяОбработчикаПриПереходеНазад = "СтраницаВопросы_ПриПереходеНазад";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 3;
	Переход.ИмяОсновнойСтраницы     = "СтраницаРезультаты";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОкончание";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииОкончание";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаРезультаты_ПриОткрытии";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаВопросовВыбранныйОтвет.Имя);
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаВопросов.ВыбранныйОтвет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "#ОшибкаВыполнения";
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Ошибка'"));
	
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаВопросовПравильныйОтвет.Имя);
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаВопросов.ПравильныйОтвет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "#ОшибкаВыполнения";
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Ошибка'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВопросы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВопросыКОлимпиаде.Ссылка КАК Ссылка,
		|	ВопросыКОлимпиаде.Родитель КАК Родитель,
		|	ВопросыКОлимпиаде.Наименование КАК Наименование,
		|	ВопросыКОлимпиаде.Родитель.Наименование КАК НаименованиеРодителя,
		|	ВопросыКОлимпиаде.КодНаВстроенномЯзыке КАК КодНаВстроенномЯзыке,
		|	ВопросыКОлимпиаде.ОписаниеОтвета КАК ОписаниеОтвета,
		|	ВопросыКОлимпиаде.ВариантыОтветов.(
		|		НомерСтроки,
		|		Ответ,
		|		Корректный,
		|		Открытый) КАК ВариантыОтветов
		|ИЗ
		|	Справочник.ВопросыКОлимпиаде КАК ВопросыКОлимпиаде
		|ГДЕ
		|	ВопросыКОлимпиаде.ЭтоГруппа = ЛОЖЬ
		|	И ВопросыКОлимпиаде.ПометкаУдаления = ЛОЖЬ";
	
	ТаблицаВопросов.Очистить();
	
	ВыборкаВопросов = Запрос.Выполнить().Выбрать();
	Пока (ВыборкаВопросов.Следующий()) Цикл
		
		ДанныеВопроса = ТаблицаВопросов.Добавить();
		
		ДанныеВопроса.Вопрос = ВыборкаВопросов.Ссылка;
		ДанныеВопроса.Рубрика = ВыборкаВопросов.Родитель;
		
		ТекстВопроса = ВыборкаВопросов.КодНаВстроенномЯзыке;
		ТекстВопроса = СтрЗаменить(ТекстВопроса, Символы.Таб, "    ");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, Символы.ВК+Символы.ПС, Символы.ПС);
		ТекстВопроса = КодНаВстроенномЯзыке(ТекстВопроса);
		
		ДанныеВопроса.Заголовок = ВыборкаВопросов.НаименованиеРодителя;
		ДанныеВопроса.ТекстВопроса = ТекстВопроса;
		
		ВыборкаОтветов = ВыборкаВопросов.ВариантыОтветов.Выбрать();
		Пока (ВыборкаОтветов.Следующий()) Цикл
			
			ДанныеОтвета = ДанныеВопроса.Ответы.Добавить();
			ДанныеОтвета.Значение = ВыборкаОтветов.НомерСтроки;
			ДанныеОтвета.Представление = ВыборкаОтветов.Ответ;
			ДанныеОтвета.Пометка = ВыборкаОтветов.Открытый;
			
			Если (ВыборкаОтветов.Корректный) Тогда
				ДанныеВопроса.ПравильныйОтвет = ВыборкаОтветов.НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеВопроса.Ответы.СортироватьПоЗначению();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Структура = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = ЗначениеПоУмолчанию;
	Если Структура.Свойство(Ключ, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПеремешатьВопросы()
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ФорматнаяСтрока = "ЧЦ=5; ЧДЦ=0; ЧН=; ЧВН=; ЧГ=;";
	
	КопияТаблицыВопросов = ТаблицаВопросов.Выгрузить();
	
	КопияТаблицыВопросов.Колонки.Добавить("КлючРубрики");
	КопияТаблицыВопросов.Колонки.Добавить("КлючВопроса");
	
	КлючиРубрик = Новый Соответствие();
	
	Для Каждого ДанныеВопроса Из КопияТаблицыВопросов Цикл
		
		КлючРубрики = КлючиРубрик.Получить(ДанныеВопроса.Рубрика);
		
		Если КлючРубрики = Неопределено Тогда
			
			СлучайноеЧисло = ГСЧ.СлучайноеЧисло(1, ТаблицаВопросов.Количество());
			КлючРубрики = Формат(СлучайноеЧисло, ФорматнаяСтрока);
			
			КлючиРубрик.Вставить(ДанныеВопроса.Рубрика, КлючРубрики);
			
		КонецЕсли;
			
		СлучайноеЧисло = ГСЧ.СлучайноеЧисло(1, ТаблицаВопросов.Количество());
		КлючВопроса = Формат(СлучайноеЧисло, ФорматнаяСтрока);
		
		ДанныеВопроса.КлючВопроса = КлючВопроса;
		ДанныеВопроса.КлючРубрики = КлючРубрики;
		
	КонецЦикла;
	
	КопияТаблицыВопросов.Сортировать("КлючРубрики, КлючВопроса");
	
	ТаблицаВопросов.Загрузить(КопияТаблицыВопросов); 
	
КонецПроцедуры

&НаСервере
Процедура ПронумероватьВопросы()
	
	Для НомерСтроки = 1 По ТаблицаВопросов.Количество() Цикл
		ТаблицаВопросов[НомерСтроки - 1].НомерСтроки = НомерСтроки;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРезультаты()
	
	КоличествоПропущенныхВопросов = 0;
	КоличествоПравильныхОтветов = 0;
	
	Для каждого РеквизитыВопроса Из ТаблицаВопросов Цикл
		
		Если ПустаяСтрока(РеквизитыВопроса.ВыбранныйОтвет) Тогда
			
			РеквизитыВопроса.Статус = 1;
			КоличествоПропущенныхВопросов = КоличествоПропущенныхВопросов + 1;
			
		ИначеЕсли РеквизитыВопроса.ВыбранныйОтвет = РеквизитыВопроса.ПравильныйОтвет Тогда 
			
			РеквизитыВопроса.Статус = 0;
			КоличествоПравильныхОтветов = КоличествоПравильныхОтветов + 1;
			
		Иначе
			
			РеквизитыВопроса.Статус = 2;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросТестируемому()
	
	РеквизитыВопроса = ТаблицаВопросов[ПорядковыйНомерВопроса - 1];
	
	// Заголовок
	
	ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Вопрос %1 из %2: %3'"),
		Строка(ПорядковыйНомерВопроса),
		Строка(ТаблицаВопросов.Количество()),
		РеквизитыВопроса.Заголовок);
		
	Элементы.ДекорацияЗаголовокВопроса.Заголовок = ТекстЗаголовка;
	
	// Вопрос
	
	ТекстВопросаHTML = ПолучитьПредставлениеВопросаHTML(РеквизитыВопроса.ТекстВопроса);
	
	// Ответы
	
	СписокОтветов = Элементы.ВыбранныйОтвет.СписокВыбора;
	СписокОтветов.Очистить();
	
	СписокОткрытыхОтветов = Элементы.ВыбранныйОтветОткрытый.СписокВыбора;
	СписокОткрытыхОтветов.Очистить();
	
	Для Каждого Ответ Из РеквизитыВопроса.Ответы Цикл
		
		Если Ответ.Пометка Тогда
			СписокОткрытыхОтветов.Добавить(Ответ.Значение, Ответ.Представление);			
		Иначе
			СписокОтветов.Добавить(Ответ.Значение, Ответ.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	// Результаты
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыВопроса, "ВыбранныйОтвет, КомментарийКОтвету");
	
	ЭтотОбъект.ВремяПереходаКВопросу = ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьВыбранныйОтвет()
	
	РеквизитыВопроса = ТаблицаВопросов[ПорядковыйНомерВопроса - 1];
	
	ЗаполнитьЗначенияСвойств(РеквизитыВопроса, ЭтотОбъект, "ВыбранныйОтвет, КомментарийКОтвету");
	
	РеквизитыВопроса.ВремяОтвета = РеквизитыВопроса.ВремяОтвета + (ТекущаяДата() - ВремяПереходаКВопросу);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросВОтдельномОкне(РеквизитыВопроса)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", РеквизитыВопроса.Заголовок);
	ПараметрыФормы.Вставить("ТекстHTML", ПолучитьПредставлениеВопросаHTML(РеквизитыВопроса.ТекстВопроса));
	
	ИмяФормыВопроса = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".", НаправлениеПоиска.СКонца)) + "ФормаТекстаHTML";
	
	ОткрытьФорму(ИмяФормыВопроса, ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВремяСтрокой(Знач Время)
	
	Если Не ЗначениеЗаполнено(Время) Тогда
		Возврат НСтр("ru = '0 сек.'")
	КонецЕсли; 
	
	Результат = "";
	
	КоличествоСекунд = Время % 60;
	Время = Цел(Время / 60);
	
	Если КоличествоСекунд <> 0 Тогда
		Результат = СтрШаблон(НСтр("ru = '%1 сек. %2'"), Строка(КоличествоСекунд), Результат);
	КонецЕсли; 
	
	КоличествоМинут = Время % 60;
	Время = Цел(Время / 60);
	
	Если КоличествоМинут <> 0 Тогда
		Результат = СтрШаблон(НСтр("ru = '%1 мин. %2'"), Строка(КоличествоМинут), Результат);
	КонецЕсли; 
	
	КоличествоЧасов = Время;
	
	Если КоличествоЧасов <> 0 Тогда
		Результат = СтрШаблон(НСтр("ru = '%1 час. %2'"), Строка(КоличествоЧасов), Результат);
	КонецЕсли;
	
	Возврат СокрП(Результат);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПодтверждениеЗакрытияФормы(Отказ, Знач ЗавершениеРаботы, Знач ТекстПредупреждения)

	Если ЭтотОбъект.ЗакрытьФормуБезусловно Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьЗакрытиеФормы", ЭтотОбъект, Параметры);
	
	ПоказатьВопрос(Оповещение, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьЗакрытиеФормы(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да
		Или Ответ = КодВозвратаДиалога.ОК Тогда
		ЭтотОбъект.ЗакрытьФормуБезусловно = Истина;
		ЗавершитьТестирование();
	Иначе
		ЭтотОбъект.ЗакрытьФормуБезусловно = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьТестирование()
	Если ЭтотОбъект.ВладелецФормы = Неопределено Тогда
		ЗавершитьРаботуСистемы();
	Иначе
		ЭтотОбъект.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатыНаСервере()
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	ИдентификаторПользователя = ТекущийПользователь.УникальныйИдентификатор;
	ИмяПользователя = ТекущийПользователь.ПолноеИмя;
	
	НаборЗаписей = РегистрыСведений.Результаты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПользователя.Установить(ТекущийПользователь.УникальныйИдентификатор);
	
	Для Каждого ДанныеВопроса Из ТаблицаВопросов Цикл
		
		Запись = НаборЗаписей.Добавить();
		
		Запись.ИдентификаторПользователя = ИдентификаторПользователя;
		Запись.ИмяПользователя = ИмяПользователя;
		
		Запись.Вопрос = ДанныеВопроса.Вопрос;
		Запись.Ответ = ДанныеВопроса.ВыбранныйОтвет;
		Запись.Комментарий = ДанныеВопроса.КомментарийКОтвету;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ФорматированиеКода

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеВопросаHTML(ТекстВопроса)
	
	Возврат СтрШаблон(
		"<HTML>
		|	<HEAD>
		|		<STYLE type=text/css>
		|			SPAN {FONT-SIZE: 8pt; FONT-FAMILY: 'Courier New'; COLOR: #0000ff}
		|				.PREPROC {COLOR: #963200}
		|				.COMMENT {COLOR: #008000}
		|				.KEYWORD {COLOR: #ff0000}
		|				.SNAME   {COLOR: #0000ff}
		|				.NUMBER  {COLOR: #000000}
		|				.STRING  {COLOR: #000000}
		|				.DATE    {COLOR: #000000}
		|				.LABEL   {COLOR: #000000}
		|				.SIGN    {COLOR: #ff0000}
		|		</STYLE>
		|	</HEAD>
		|	<BODY>
		|<PRE><SPAN>%1</SPAN><PRE>
		|	</BODY>
		|</HTML>",
		ТекстВопроса);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодНаВстроенномЯзыке(ИсходныйКод) Экспорт
	
	ЧастиФорматированногоТекста = Новый Массив;
		
	СтрокиИсходногоКода = СтрРазделить(ИсходныйКод, Символы.ПС, Истина);
	
	КлючевыеСлова = КлючевыеСловаВстроенногоЯзыка();
	
	ВсеПустыеСимволы = СтрокаПустыхСимволов();
	ВсеБуквы = СтрокаВсехБуквАлфавитов();
	ВсеЦифры = "0123456789";
	ВсеЦифрыСТочкой = ВсеЦифры + ".";
	ВсеБуквыИЦифры = ВсеБуквы + ВсеЦифры;
	
	ТипЛексемы = Неопределено;
	Лексема = Неопределено;
	
	Для ИндексПодстроки = 0 По СтрокиИсходногоКода.ВГраница() Цикл
		
		ПодстрокаКода = СтрокиИсходногоКода[ИндексПодстроки];
		ДлинаПодстроки = СтрДлина(ПодстрокаКода);
		
		НачалоЛексемы = 1;
		ПредыдущаяЛексема = "";
		
		ФорматированнаяПодстрока = ?(ИндексПодстроки = 0, "", Символы.ПС);
		
		Пока НачалоЛексемы <= ДлинаПодстроки Цикл
			
			КонецЛексемы = НачалоЛексемы + 1;
			СимволЛексемы = Сред(ПодстрокаКода, НачалоЛексемы, 1);
			ЗаменитьСлужебныеСимволы = Истина;
			
			Если СтрНайти(ВсеПустыеСимволы, СимволЛексемы) Тогда
				// пробельные символы
				ТипЛексемы = Неопределено;
				ПропуститьСимволыВСтроке(ПодстрокаКода, ВсеПустыеСимволы, КонецЛексемы, ДлинаПодстроки);
				ЗаменитьСлужебныеСимволы = Ложь;
				
			ИначеЕсли СтрНайти(ВсеБуквы, СимволЛексемы) Тогда
				// символьное имя
				ТипЛексемы = "SNAME";
				ПропуститьСимволыВСтроке(ПодстрокаКода, ВсеБуквыИЦифры, КонецЛексемы, ДлинаПодстроки);
				ЗаменитьСлужебныеСимволы = Ложь;
				
				Если ПредыдущаяЛексема <> "." Тогда
					Лексема = ВРег(Сред(ПодстрокаКода, НачалоЛексемы, КонецЛексемы - НачалоЛексемы));
					Если КлючевыеСлова[Лексема] = Истина Тогда
						ТипЛексемы = "KEYWORD";
					КонецЕсли;
				КонецЕсли; 
				
			ИначеЕсли (СимволЛексемы = "#" Или СимволЛексемы = "&") И ПустаяСтрока(ФорматированнаяПодстрока) Тогда 
				// инструкции препроцессора, разметка области
				ТипЛексемы = "PREPROC";
				КонецЛексемы = ДлинаПодстроки + 1;
				
			ИначеЕсли Сред(ПодстрокаКода, НачалоЛексемы, 2) = "//" Тогда 
				// комментарий
				ТипЛексемы = "COMMENT";
				КонецЛексемы = ДлинаПодстроки + 1; 
				
			ИначеЕсли СтрНайти(ВсеЦифры, СимволЛексемы) Тогда 
				// число
				ТипЛексемы = "NUMBER";
				ПропуститьСимволыВСтроке(ПодстрокаКода, ВсеЦифрыСТочкой, КонецЛексемы, ДлинаПодстроки);
				ЗаменитьСлужебныеСимволы = Ложь;
				
			ИначеЕсли СимволЛексемы = "~" Тогда
				// метка перехода
				ТипЛексемы = "LABEL";
				ПропуститьСимволыВСтроке(ПодстрокаКода, ВсеБуквыИЦифры, КонецЛексемы, ДлинаПодстроки);
				ЗаменитьСлужебныеСимволы = Ложь;
				
			ИначеЕсли СимволЛексемы = """" Или СимволЛексемы = "|" Тогда
				// строка
				ТипЛексемы = "STRING";
				ПропуститьСимволыДоЗакрывающихКавычек(ПодстрокаКода, КонецЛексемы, ДлинаПодстроки);
				
			ИначеЕсли СимволЛексемы = "'" Тогда
				// дата
				ТипЛексемы = "DATE";
				КонецЛексемы = СтрНайти(ПодстрокаКода, "'", , НачалоЛексемы + 1);
				Если КонецЛексемы = 0 Тогда
					КонецЛексемы = ДлинаПодстроки + 1;
				КонецЕсли; 
				
			Иначе
				// произвольный символ
				ТипЛексемы = "SIGN";
				
			КонецЕсли; 
			
			Лексема = Сред(ПодстрокаКода, НачалоЛексемы, КонецЛексемы - НачалоЛексемы);
			
			ТекстДляВставки = Лексема;
			Если ЗаменитьСлужебныеСимволы Тогда
				ЗаменитьСлужебныеСимволыHTML(ТекстДляВставки);
			КонецЕсли; 
			Если ТипЛексемы <> Неопределено И ТипЛексемы <> "SNAME" Тогда
				ТекстДляВставки = СтрШаблон("<SPAN class=%1>%2</SPAN>", ТипЛексемы, ТекстДляВставки);
			КонецЕсли;
			
			ФорматированнаяПодстрока = ФорматированнаяПодстрока + ТекстДляВставки;
			
			ПредыдущаяЛексема = Лексема;				
			НачалоЛексемы = КонецЛексемы;
			
		КонецЦикла;
		
		ЧастиФорматированногоТекста.Добавить(ФорматированнаяПодстрока);
				
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиФорматированногоТекста);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПропуститьСимволыВСтроке(ИсходнаяСтрока, ПропускаемыеСимволы, ТекущаяПозиция, Ограничение)
	
	Пока ТекущаяПозиция <= Ограничение 
		И СтрНайти(ПропускаемыеСимволы, Сред(ИсходнаяСтрока,ТекущаяПозиция,1)) Цикл
		
		ТекущаяПозиция = ТекущаяПозиция + 1;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПропуститьСимволыДоЗакрывающихКавычек(ИсходнаяСтрока, ТекущаяПозиция, Ограничение)
	
	ПродолжатьПоискКонцаСтроки = (ТекущаяПозиция <= Ограничение);	
	Пока ПродолжатьПоискКонцаСтроки Цикл
		
		ТекущаяПозиция = СтрНайти(ИсходнаяСтрока, """", , ТекущаяПозиция);
		
		Если ТекущаяПозиция = Ограничение Или ТекущаяПозиция = 0 Тогда
			ТекущаяПозиция = Ограничение + 1;
			ПродолжатьПоискКонцаСтроки = Ложь;
		ИначеЕсли Сред(ИсходнаяСтрока, ТекущаяПозиция+1, 1) = """" Тогда
			ТекущаяПозиция = ТекущаяПозиция + 2;
			ПродолжатьПоискКонцаСтроки = (ТекущаяПозиция <= Ограничение);
		Иначе 
			ТекущаяПозиция = ТекущаяПозиция + 1;
			ПродолжатьПоискКонцаСтроки = Ложь;
		КонецЕсли; 
		
	КонецЦикла;
				
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСлужебныеСимволыHTML(Текст)
	
	Текст = СтрЗаменить(Текст, "&", "&amp;");
	Текст = СтрЗаменить(Текст, "<", "&lt;");
	Текст = СтрЗаменить(Текст, ">", "&gt;");
				
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеСловаВстроенногоЯзыка()
	
	МассивСлов = "
	|Функция
	|КонецФункции	
	|Процедура
	|КонецПроцедуры
	|Экспорт
	|Знач
	|Перем
	
	|Function
	|EndFunction	
	|Procedure
	|EndProcedure
	|Export
	|Val
	|Var
	
	|Если
	|Тогда
	|ИначеЕсли
	|Иначе
	|КонецЕсли
	
	|If
	|Then
	|ElsIf
	|Else
	|EndIf
	
	|Пока
	|Для
	|Каждого
	|По
	|Цикл
	|КонецЦикла
	
	|While
	|For
	|Each
	|To
	|Do
	|EndDo
	
	|Возврат
	|Прервать
	|Продолжить
	|Перейти
	
	|Return
	|Break
	|Continue
	|GoTo
	
	|Выполнить
	|ДобавитьОбработчик
	|УдалитьОбработчик
	
	|Execute
	|AddHandler
	|RemoveHandler
	
	|Попытка
	|Исключение
	|КонецПопытки
	|ВызватьИсключение
	
	|Try
	|Except
	|EndTry
	|Raise
	
	|Новый
	|Неопределено
	|NULL
	
	|New
	|Undefined
	
	|И
	|Или
	|Не
	|Истина
	|Ложь
	
	|And
	|Or
	|Not
	|True
	|False
	
	|";
	
	КлючевыеСлова = Новый Соответствие;
	Для каждого Слово Из СтрРазделить(ВРег(МассивСлов), Символы.ПС, Ложь) Цикл
		КлючевыеСлова.Вставить(СокрЛП(Слово), Истина);
	КонецЦикла; 
	
	Возврат КлючевыеСлова;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПустыхСимволов()
	
	Возврат " " + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВсехБуквАлфавитов()
	
	ВсеБуквы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	Возврат ВсеБуквы + "_" + НРег(ВсеБуквы);
	
КонецФункции

#КонецОбласти
