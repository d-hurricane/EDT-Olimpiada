
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ИмяТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	
	ЗагрузитьВопросы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТаблицаПереходовПоСценарию();
	
	ПеремешатьВопросы();
	
	УстановитьГраничныеСтраницыВопросов();
	
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТекстПредупреждения = НСтр("ru = 'Завершить тестирование?'");
	
	ПоказатьПодтверждениеЗакрытияФормы(Отказ, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТаблицаВопросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РеквизитыВопроса = ТаблицаВопросов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПоказатьВопросВОтдельномОкне(РеквизитыВопроса);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	ЗавершитьТестирование();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	ЗавершитьТестирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекстВопроса(Команда)
	
	ПоказатьВопросВОтдельномОкне(ТекущиеДанныеВопроса());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяСтраницыДекорации) Тогда
		
		Элементы.ПанельДекорации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
		
	КонецЕсли;
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеДалее.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				//@skip-warning
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеНазад.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода + 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		//@skip-warning
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов.

// Обработчик выполняется при открытии страницы помощника "СтраницаВопросы".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаНачало_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если Не ЭтоПереходДалее Тогда
		Отказ = Истина;
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаВопросы".
//
// Параметры:
//   Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаНачало_ПриПереходеДалее(Отказ)
	
	ВремяНачалаТестирования = ТекущаяДата();
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаВопросы".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаВопросы_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ДанныеВопроса = ТекущиеДанныеВопроса();

	// Заголовок
	
	ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Вопрос %1 из %2: %3'"),
		Строка(ДанныеВопроса.ПорядковыйНомер),
		Строка(ОбщееКоличествоВопросов),
		ДанныеВопроса.ПолучитьРодителя().Заголовок);
		
	Элементы.ДекорацияЗаголовокВопроса.Заголовок = ТекстЗаголовка;
	
	// Вопрос
	
	ТекстВопросаHTML = ДанныеВопроса.ТекстВопроса;
	
	// Ответы
	
	СписокОтветов = Элементы.ВыбранныйОтвет.СписокВыбора;
	СписокОтветов.Очистить();
	
	Для Каждого Ответ Из ДанныеВопроса.Ответы Цикл
		СписокОтветов.Добавить(Ответ.Значение, Ответ.Представление);		
	КонецЦикла;
	
	Элементы.ВыбранныйОтвет.КоличествоКолонок = Цел(СписокОтветов.Количество()/2 + 0.5);
	
	// Результаты
	
	ЭтотОбъект.ВыбранныйОтвет = ДанныеВопроса.ВыбранныйОтвет;
	ЭтотОбъект.МоментПереходаКВопросу = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	Возврат Неопределено;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаВопросы".
//
// Параметры:
//   Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаВопросы_ПриПереходеДалее(Отказ)
	
	ЗафиксироватьВыбранныйОтвет(Истина); 
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "СтраницаВопросы".
//
// Параметры:
//   Отказ - Булево - флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на предыдущую страницу выполнен не будет.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаВопросы_ПриПереходеНазад(Отказ)
		
	ЗафиксироватьВыбранныйОтвет(Ложь);
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаРезультаты".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
//@skip-warning
&НаКлиенте
Функция Подключаемый_СтраницаРезультаты_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ВремяОкончанияТестирования = ТекущаяДата();
	
	СохранитьРезультатыНаСервере();
	
	ЗаполнитьРеквизитыПредставленияРезультатов();
	
	Для Каждого ДанныеРубрики Из ТаблицаВопросов.ПолучитьЭлементы() Цикл
		Элементы.ТаблицаВопросов.Развернуть(ДанныеРубрики.ПолучитьИдентификатор());
	КонецЦикла; 
	
	ВремяТестированияВСекундах = ВремяОкончанияТестирования - ВремяНачалаТестирования;
	ВремяТестированияСтрокой = ВремяСтрокой(ВремяТестированияВСекундах);
	
	КоличествоВопросов = ОбщееКоличествоВопросов;
	ПроцентПравильноОтвеченных = ?(КоличествоВопросов <> 0, Цел(КоличествоПравильныхОтветов/КоличествоВопросов*100), 0);
	
	ТекстСтатистики =
		НСтр("ru = 'Затраченное время: [ВремяТестирования]
              |Всего вопросов: [КоличествоВопросов]
              |Правильно отвечено: [ПравильноОтвеченных] ([ПроцентПравильноОтвеченных]%)
              |Пропущено: [ПропущенныхОтветов]'");
	
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[ВремяТестирования]", ВремяТестированияСтрокой);
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[КоличествоВопросов]", КоличествоВопросов);
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[ПравильноОтвеченных]", КоличествоПравильныхОтветов);
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[ПроцентПравильноОтвеченных]", ПроцентПравильноОтвеченных);
	ТекстСтатистики = СтрЗаменить(ТекстСтатистики, "[ПропущенныхОтветов]", КоличествоПропущенныхВопросов);
	
	Элементы.ДекорацияРезультаты.Заголовок = ТекстСтатистики;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника.

&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	Перем НомерРубрики, НомерВопроса;
	
	ТаблицаПереходов.Очистить();
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = ТаблицаПереходов.Количество();
	Переход.ИмяОсновнойСтраницы     = "СтраницаНачало";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииНачало";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииНачало";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаНачало_ПриОткрытии";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаНачало_ПриПереходеДалее";
	
	НомерРубрики = 0;
	
	Для Каждого ДанныеРубрики Из ТаблицаВопросов.ПолучитьЭлементы() Цикл
		
		НомерРубрики = НомерРубрики + 1;
		НомерВопроса = 0;
		
		//@skip-warning
		Для Каждого ДанныеВопроса Из ДанныеРубрики.ПолучитьЭлементы() Цикл
			
			НомерВопроса = НомерВопроса + 1;
			
			Переход = ТаблицаПереходов.Добавить();
			Переход.ПорядковыйНомерПерехода = ТаблицаПереходов.Количество();
			Переход.НомерРубрики = НомерРубрики;
			Переход.НомерВопроса = НомерВопроса;
			
			Переход.ИмяОсновнойСтраницы     = "СтраницаВопросы";
			Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
			Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
			Переход.ИмяОбработчикаПриОткрытии = "СтраницаВопросы_ПриОткрытии";
			Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаВопросы_ПриПереходеДалее";
			Переход.ИмяОбработчикаПриПереходеНазад = "СтраницаВопросы_ПриПереходеНазад";
			
		КонецЦикла;
		
	КонецЦикла;
		
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = ТаблицаПереходов.Количество();
	Переход.ИмяОсновнойСтраницы     = "СтраницаРезультаты";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОкончание";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииОкончание";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаРезультаты_ПриОткрытии";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаВопросов.Имя);
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаВопросов.Вопрос");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВопросы()
	
	ОбщееКоличествоВопросов = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВопросыКОлимпиаде.Ссылка КАК Ссылка,
		|	ВопросыКОлимпиаде.Родитель КАК Родитель,
		|	ВопросыКОлимпиаде.Наименование КАК НаименованиеВопроса,
		|	ВопросыКОлимпиаде.Родитель.Наименование КАК НаименованиеРодителя,
		|	ВопросыКОлимпиаде.КодНаВстроенномЯзыке КАК КодНаВстроенномЯзыке,
		|	ВопросыКОлимпиаде.ОписаниеОтвета КАК ОписаниеОтвета,
		|	ВопросыКОлимпиаде.ВариантыОтветов.(
		|		НомерСтроки,
		|		Ответ,
		|		Корректный) КАК ВариантыОтветов
		|ИЗ
		|	Справочник.ВопросыКОлимпиаде КАК ВопросыКОлимпиаде
		|ГДЕ
		|	ВопросыКОлимпиаде.ЭтоГруппа = ЛОЖЬ
		|	И ВопросыКОлимпиаде.ПометкаУдаления = ЛОЖЬ
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеРодителя,
		|	НаименованиеВопроса
		|ИТОГИ
		|ПО
		|	Родитель";
	
	КоллекцияРубрик = ТаблицаВопросов.ПолучитьЭлементы();
	КоллекцияРубрик.Очистить();
	
	ВыборкаРубрик = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРубрик.Следующий() Цикл
		
		ДанныеРубрики = КоллекцияРубрик.Добавить();
		ДанныеРубрики.Рубрика = ВыборкаРубрик.Родитель;
		ДанныеРубрики.Заголовок = ВыборкаРубрик.НаименованиеРодителя;
		
		КоллекцияВопросов = ДанныеРубрики.ПолучитьЭлементы();
		
		ВыборкаВопросов = ВыборкаРубрик.Выбрать();
		Пока ВыборкаВопросов.Следующий() Цикл
			
			ОбщееКоличествоВопросов = ОбщееКоличествоВопросов + 1;
			
			ДанныеВопроса = КоллекцияВопросов.Добавить();
			
			ДанныеВопроса.ПорядковыйНомер = ОбщееКоличествоВопросов;
			ДанныеВопроса.Вопрос = ВыборкаВопросов.Ссылка;
			ДанныеВопроса.Рубрика = ВыборкаВопросов.Родитель;
			
			ТекстВопроса = ВыборкаВопросов.КодНаВстроенномЯзыке;
			ТекстВопроса = СтрЗаменить(ТекстВопроса, Символы.Таб, "    ");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, Символы.ВК+Символы.ПС, Символы.ПС);
			ТекстВопроса = ФорматированиеКода.КодНаВстроенномЯзыке(ТекстВопроса);
			
			ДанныеВопроса.Заголовок = ВыборкаВопросов.НаименованиеВопроса;
			ДанныеВопроса.ТекстВопроса = ТекстВопроса;
			
			ВыборкаОтветов = ВыборкаВопросов.ВариантыОтветов.Выбрать();
			Пока ВыборкаОтветов.Следующий() Цикл
				
				ДанныеОтвета = ДанныеВопроса.Ответы.Добавить();
				ДанныеОтвета.Значение = ВыборкаОтветов.НомерСтроки;
				ДанныеОтвета.Представление = ВыборкаОтветов.Ответ;
				
				Если ВыборкаОтветов.Корректный Тогда
					ДанныеВопроса.ПравильныйОтвет = ВыборкаОтветов.НомерСтроки;
				КонецЕсли;
				
			КонецЦикла;
			
			ДанныеВопроса.Ответы.СортироватьПоЗначению();
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Структура = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = ЗначениеПоУмолчанию;
	Если Структура.Свойство(Ключ, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПеремешатьВопросы()
	
	ИндексСлучайногоЗначения = 2 * ТаблицаПереходов.Количество() + 1;
	СлучайныеЗначения = МассивСлучайныхЗначений(ИндексСлучайногоЗначения);
	ФорматнаяСтрока = "ЧЦ=5; ЧДЦ=0; ЧН=; ЧВН=; ЧГ=;";

	КлючиРубрик = Новый Соответствие();
	
	Для НомерРубрики = 1 По ТаблицаВопросов.ПолучитьЭлементы().Количество() Цикл
		
		ИндексСлучайногоЗначения = ИндексСлучайногоЗначения - 1;
		СлучайноеЧисло = СлучайныеЗначения[ИндексСлучайногоЗначения];
		КлючРубрики = Формат(СлучайноеЧисло, ФорматнаяСтрока);
		
		КлючиРубрик.Вставить(НомерРубрики, КлючРубрики);
		
	КонецЦикла;	
	
	СписокПереходов = Новый СписокЗначений;
	МассивНомеров = Новый Массив;
	
	Для Каждого Переход Из ТаблицаПереходов Цикл
		
		Если Переход.НомерВопроса = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КлючРубрики = КлючиРубрик[Переход.НомерРубрики];
		
		ИндексСлучайногоЗначения = ИндексСлучайногоЗначения - 1;
		СлучайноеЧисло = СлучайныеЗначения[ИндексСлучайногоЗначения];
		КлючВопроса = Формат(СлучайноеЧисло, ФорматнаяСтрока);
		
		СписокПереходов.Добавить(Переход, КлючРубрики + "/" + КлючВопроса);
		
		МассивНомеров.Добавить(Переход.ПорядковыйНомерПерехода);
		
	КонецЦикла;

	СписокПереходов.СортироватьПоПредставлению();
	
	Для Индекс = 0 По МассивНомеров.ВГраница() Цикл
		
		Переход = СписокПереходов[Индекс].Значение;
		Переход.ПорядковыйНомерПерехода = МассивНомеров[Индекс];
		
		ДанныеРубрики = ТаблицаВопросов.ПолучитьЭлементы()[Переход.НомерРубрики - 1];
		ДанныеВопроса = ДанныеРубрики.ПолучитьЭлементы()[Переход.НомерВопроса - 1];
		
		ДанныеВопроса.ПорядковыйНомер = Индекс + 1;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСлучайныхЗначений(КоличествоЗначений)
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	Результат = Новый Массив(КоличествоЗначений);
	
	Для Индекс = 0 По Результат.ВГраница() Цикл
		Результат[Индекс] = ГСЧ.СлучайноеЧисло(0, 99999);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьГраничныеСтраницыВопросов()
	
	ПервыйПереход = Неопределено;
	ПоследнийПереход = Неопределено;
	
	Для Каждого Переход Из ТаблицаПереходов Цикл
		Если Переход.НомерВопроса <> 0 Тогда
			Если ПервыйПереход = Неопределено Или Переход.ПорядковыйНомерПерехода < ПервыйПереход.ПорядковыйНомерПерехода Тогда
				ПервыйПереход = Переход;
			КонецЕсли;
			Если ПоследнийПереход = Неопределено Или Переход.ПорядковыйНомерПерехода > ПоследнийПереход.ПорядковыйНомерПерехода Тогда
				ПоследнийПереход = Переход;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйПереход <> Неопределено Тогда
		ПервыйПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПервыйВопрос";
	КонецЕсли;
	Если ПоследнийПереход <> Неопределено Тогда
		ПоследнийПереход.ИмяСтраницыНавигации = "СтраницаНавигацииПоследнийВопрос";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПредставленияРезультатов()
	
	КоличествоПропущенныхВопросов = 0;
	КоличествоПравильныхОтветов = 0;
	
	Для Каждого ДанныеРубрики Из ТаблицаВопросов.ПолучитьЭлементы() Цикл
		
		ДанныеРубрики.Статус = -1;
		
		Для каждого ДанныеВопроса Из ДанныеРубрики.ПолучитьЭлементы() Цикл
		
			Если ДанныеВопроса.ВыбранныйОтвет = 0 Тогда
				
				ДанныеВопроса.Статус = 1;
				КоличествоПропущенныхВопросов = КоличествоПропущенныхВопросов + 1;
				
			ИначеЕсли ДанныеВопроса.ВыбранныйОтвет = ДанныеВопроса.ПравильныйОтвет Тогда 
				
				ДанныеВопроса.Статус = 0;
				КоличествоПравильныхОтветов = КоличествоПравильныхОтветов + 1;
				
			Иначе
				
				ДанныеВопроса.Статус = 2;
				
			КонецЕсли;
			 
			ДанныеВыбранногоОтвета = ДанныеВопроса.Ответы.НайтиПоЗначению(ДанныеВопроса.ВыбранныйОтвет);
			ДанныеПравильногоОтвета = ДанныеВопроса.Ответы.НайтиПоЗначению(ДанныеВопроса.ПравильныйОтвет);
			
			ДанныеВопроса.ТекстВыбранногоОтвета = ?(ДанныеВыбранногоОтвета <> Неопределено, ДанныеВыбранногоОтвета.Представление, "");
			ДанныеВопроса.ТекстПравильногоОтвета = ДанныеПравильногоОтвета.Представление;
			
			ДанныеВопроса.ВремыОтветаВСекундах = ДанныеВопроса.ВремяОтвета / 1000;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьВыбранныйОтвет(ЭтоПереходДалее)
	
	ТекущийМомент = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВремяНаВопрос = ТекущийМомент - МоментПереходаКВопросу;
	
	Если ЭтоПереходДалее Тогда
		РеквизитыВопроса = ПолучитьДанныеВопроса(ПорядковыйНомерПерехода - 1);
	Иначе
		РеквизитыВопроса = ПолучитьДанныеВопроса(ПорядковыйНомерПерехода + 1);
	КонецЕсли;
	
	РеквизитыВопроса.ВыбранныйОтвет = ЭтотОбъект.ВыбранныйОтвет;
	РеквизитыВопроса.ВремяОтвета = РеквизитыВопроса.ВремяОтвета + ВремяНаВопрос;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросВОтдельномОкне(РеквизитыВопроса)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", РеквизитыВопроса.Заголовок);
	ПараметрыФормы.Вставить("ТекстHTML", РеквизитыВопроса.ТекстВопроса);
	
	ИмяФормыВопроса = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".", НаправлениеПоиска.СКонца)) + "ФормаТекстаHTML";
	
	ОткрытьФорму(ИмяФормыВопроса, ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВремяСтрокой(Знач Время)
	
	Если Не ЗначениеЗаполнено(Время) Тогда
		Возврат НСтр("ru = '0 сек.'")
	КонецЕсли; 
	
	Результат = "";
	
	КоличествоСекунд = Время % 60;
	Время = Цел(Время / 60);
	
	Если КоличествоСекунд <> 0 Тогда
		Результат = СтрШаблон(НСтр("ru = '%1 сек. %2'"), Строка(КоличествоСекунд), Результат);
	КонецЕсли; 
	
	КоличествоМинут = Время % 60;
	Время = Цел(Время / 60);
	
	Если КоличествоМинут <> 0 Тогда
		Результат = СтрШаблон(НСтр("ru = '%1 мин. %2'"), Строка(КоличествоМинут), Результат);
	КонецЕсли; 
	
	КоличествоЧасов = Время;
	
	Если КоличествоЧасов <> 0 Тогда
		Результат = СтрШаблон(НСтр("ru = '%1 час. %2'"), Строка(КоличествоЧасов), Результат);
	КонецЕсли;
	
	Возврат СокрП(Результат);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПодтверждениеЗакрытияФормы(Отказ, Знач ЗавершениеРаботы, Знач ТекстПредупреждения)

	Если ЭтотОбъект.ЗакрытьФормуБезусловно Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьЗакрытиеФормы", ЭтотОбъект, Параметры);
	
	ПоказатьВопрос(Оповещение, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьЗакрытиеФормы(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да
		Или Ответ = КодВозвратаДиалога.ОК Тогда
		ЭтотОбъект.ЗакрытьФормуБезусловно = Истина;
		ЗавершитьТестирование();
	Иначе
		ЭтотОбъект.ЗакрытьФормуБезусловно = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьТестирование()
	Если ЭтотОбъект.ВладелецФормы = Неопределено Тогда
		ЗавершитьРаботуСистемы();
	Иначе
		ЭтотОбъект.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатыНаСервере()
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	ИдентификаторПользователя = ТекущийПользователь.УникальныйИдентификатор;
	ИмяПользователя = ТекущийПользователь.ПолноеИмя;
	
	НаборЗаписей = РегистрыСведений.Результаты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПользователя.Установить(ТекущийПользователь.УникальныйИдентификатор);
	
	Для Каждого ДанныеРубрики Из ТаблицаВопросов.ПолучитьЭлементы() Цикл
		
		Для Каждого ДанныеВопроса Из ДанныеРубрики.ПолучитьЭлементы() Цикл
		
			ДанныеВыбранногоОтвета = ДанныеВопроса.Ответы.НайтиПоЗначению(ДанныеВопроса.ВыбранныйОтвет);
			ДанныеПравильногоОтвета = ДанныеВопроса.Ответы.НайтиПоЗначению(ДанныеВопроса.ПравильныйОтвет);
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.ИдентификаторПользователя = ИдентификаторПользователя;
			Запись.ИмяПользователя = ИмяПользователя;		
			Запись.Вопрос = ДанныеВопроса.Вопрос;
			
			Если ДанныеВыбранногоОтвета <> Неопределено Тогда
				Запись.Ответ = ДанныеВыбранногоОтвета.Значение;
				Запись.ТекстОтвета = ДанныеВыбранногоОтвета.Представление;
			КонецЕсли;
			
			Запись.ПравильныйОтвет = ДанныеПравильногоОтвета.Значение;
			Запись.ТекстПравильногоОтвета = ДанныеПравильногоОтвета.Представление;
			
			Запись.Время = ДанныеВопроса.ВремяОтвета;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеДанныеВопроса()
	Возврат ПолучитьДанныеВопроса(ПорядковыйНомерПерехода);
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеВопроса(НомерПерехода)
	
	СтрокаПереходаТекущая = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", НомерПерехода))[0];
	
	ДанныеРубрики = ТаблицаВопросов.ПолучитьЭлементы()[СтрокаПереходаТекущая.НомерРубрики - 1];
	
	ДанныеВопроса = ДанныеРубрики.ПолучитьЭлементы()[СтрокаПереходаТекущая.НомерВопроса - 1];
	
	Возврат ДанныеВопроса;
	
КонецФункции

#КонецОбласти
